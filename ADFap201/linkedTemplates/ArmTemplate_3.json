{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFap201"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/03_dataflow_filternullvalue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "logdataparqetstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "pooldbarquetload"
						}
					],
					"transformations": [
						{
							"name": "NullFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logdataparqetstream",
						"logdataparqetstream filter(!(isNull({Resourcegroup}))) ~> NullFilter",
						"NullFilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> pooldbarquetload"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04_dataflow_LoadParquettpJsontoSqlpool')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "logdataparquet",
								"type": "DatasetReference"
							},
							"name": "logdataparquetstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "logdatajson",
								"type": "DatasetReference"
							},
							"name": "Jsonstream"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logdataparquetstream",
						"logdataparquetstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     partitionFileNames:['logjson'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Jsonstream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_dataflow_LoadJsonArrays')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "CustomerJsonstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "JsonArraysTosqlpooldb"
						}
					],
					"transformations": [
						{
							"name": "JsonArray"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> CustomerJsonstream",
						"CustomerJsonstream foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          courses",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> JsonArray",
						"JsonArray sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses",
						"     )) ~> JsonArraysTosqlpooldb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/06_dataflow_LoadJsonObject')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer1json",
								"type": "DatasetReference"
							},
							"name": "CustomerJsonstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "JsonMulitpleobjectTosqlpooldb"
						}
					],
					"transformations": [
						{
							"name": "Jsonmultipleobject"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[],",
						"          details as (mobile as string, city as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> CustomerJsonstream",
						"CustomerJsonstream foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          courses,",
						"          customername,",
						"          Registered = registered,",
						"          Mobile = details.mobile,",
						"          city = details.city,",
						"          customerid",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Jsonmultipleobject",
						"Jsonmultipleobject sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered,",
						"          Courses = courses,",
						"          Mobile,",
						"          City = city",
						"     )) ~> JsonMulitpleobjectTosqlpooldb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/07_Conditional_ split_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "logdataparquet",
								"type": "DatasetReference"
							},
							"name": "logparquetstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLDW",
								"type": "DatasetReference"
							},
							"name": "pooldblogparquetstream"
						}
					],
					"transformations": [
						{
							"name": "splitresourcegroupcolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logparquetstream",
						"logparquetstream split({Resourcegroup}=='app-grp',",
						"     disjoint: false) ~> splitresourcegroupcolumn@(splitresourcegroupcolumn, splitothersourcegroupcolumn)",
						"splitresourcegroupcolumn@splitresourcegroupcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> pooldblogparquetstream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/08_dataflow_readweeblog')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stagingwebloginputmetric",
								"type": "DatasetReference"
							},
							"name": "stagingwebloginputmetricStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "stagingwebloginputmetricOutputstream"
						}
					],
					"transformations": [
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          count as integer,",
						"          total as double,",
						"          minimum as double,",
						"          maximum as double,",
						"          average as double,",
						"          resourceId as string,",
						"          time as string,",
						"          metricName as string,",
						"          timeGrain as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> stagingwebloginputmetricStream",
						"stagingwebloginputmetricStream select(mapColumn(",
						"          average,",
						"          time,",
						"          metricName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> stagingwebloginputmetricOutputstream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/07-Mapping_dataflow-FactSale_Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy Fact sale Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01_dataflow_FactSale",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderDetailStream": {},
									"SalesOrderHeaderStream": {},
									"FactSaleStream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T05:16:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/08-Mapping_dataflow-DimTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dataflow DimTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02_dataflow_Dim_Tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductModelStream": {},
									"ProductCategory": {},
									"Maxsurrogatekey": {},
									"DimCustomerLatest": {},
									"DimProductLatest": {},
									"DimCustomer": {},
									"DimProductStream": {},
									"Cachesurrogetmaxvaluesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T13:27:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/09-DerivedColumn_selectcolumn_dataflow-FactSale_Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy Fact sale Table_Derivedcolumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01_dataflow_FactSale",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderDetailStream": {},
									"SalesOrderHeaderStream": {},
									"FactSaleStream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T19:26:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/10-Surrogatekey_dataflow-DimTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Surrogatekey_Dataflow DimTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02_dataflow_Dim_Tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductModelStream": {},
									"ProductCategory": {},
									"Maxsurrogatekey": {},
									"DimCustomerLatest": {},
									"DimProductLatest": {},
									"DimCustomer": {},
									"DimProductStream": {},
									"Cachesurrogetmaxvaluesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T18:50:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/11-Catchsink forSurrogatekey_dataflow-DimTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CatchsinkSurrogatekey_Dataflow DimTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02_dataflow_Dim_Tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductModelStream": {},
									"ProductCategory": {},
									"Maxsurrogatekey": {},
									"DimCustomerLatest": {},
									"DimProductLatest": {},
									"DimCustomer": {},
									"DimProductStream": {},
									"Cachesurrogetmaxvaluesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T19:45:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/12-RemoveDuplicate_Use_NotExist_dataflow-DimTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Remove Duplicate_Use NotExists_Dataflow DimTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02_dataflow_Dim_Tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductModelStream": {},
									"ProductCategory": {},
									"Maxsurrogatekey": {},
									"DimCustomerLatest": {},
									"DimProductLatest": {},
									"DimCustomer": {},
									"DimProductStream": {},
									"Cachesurrogetmaxvaluesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T21:08:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/13-filteringrow-loadparquet-pooldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FilterNullvalue",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "03_dataflow_filternullvalue",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataparqetstream": {},
									"pooldbarquetload": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T02:28:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/03_dataflow_filternullvalue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/14-CopyParquet_Json_Pooldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadParquettoJson",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "04_dataflow_LoadParquettpJsontoSqlpool",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataparquetstream": {},
									"Jsonstream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "loadjsontosqlpool",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LoadParquettoJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Correlationid']"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Operationname']"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventcategory']"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Time']"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventinitiatedby']"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcetype']"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcegroup']"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "logdatajson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLDW",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T13:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/04_dataflow_LoadParquettpJsontoSqlpool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/15_loadjsonArraysTosqlpooldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadJsonArraysTosqlpooldb",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "05_dataflow_LoadJsonArrays",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerJsonstream": {},
									"JsonArraysTosqlpooldb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T03:10:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/05_dataflow_LoadJsonArrays')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/16_loadjsonObjectTosqlpooldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadJsonobjectTosqlpooldb",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "05_dataflow_LoadJsonArrays",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerJsonstream": {},
									"JsonArraysTosqlpooldb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T04:36:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/05_dataflow_LoadJsonArrays')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/17_load_conditional_parquetdata_sqlpool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "split parquet column and load",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "07_Conditional_ split_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logparquetstream": {},
									"pooldblogparquetstream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T13:46:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/07_Conditional_ split_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/23_readweblogMetric')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReadWebLogMetrix",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "08_dataflow_readweeblog",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stagingwebloginputmetricStream": {},
									"stagingwebloginputmetricOutputstream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/08_dataflow_readweeblog')]"
			]
		}
	]
}